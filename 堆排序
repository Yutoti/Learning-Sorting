package sorting;

//finished by LLee at 2018.1.1 17：57

public class SelectHeap {

	public void sHSorting(int[] SqList) {

		if (SqList == null) {
			System.out.println("The input is empty");
		} else {
			int i;
			for (i = SqList.length / 2 - 1; i >= 0; i--) { // 将初始数据构建为大顶堆，i从n/2-1到0，即每一次循环使得
				heapAdjust(SqList, i, SqList.length); // 第i到第n个元素成为大顶堆，最终所有元素都是大顶堆
			}

			for (i = SqList.length; i > 1; i--) { // 序列i长度由n减少到2
				swap(SqList, 0, i - 1); // 交换已经构建好的大顶堆数据（堆顶0和最后一个元素i-1
				heapAdjust(SqList, 0, i - 2); // 不断利用剩下的元素构建大顶堆，由于大部分已经是构建好了的
			} // 大顶堆，只有发生了元素交换的才需要重新构建，故从0开始
		} // 把大的往上换，构建大顶堆（正确的顺序是从下往上，从右往左，
	} // 但此处大部分都是已经构建好的大顶堆，只有0处变化了，所以从0开始）

	public void heapAdjust(int[] a, int s, int m) {

		int j, temp;
		temp = a[s]; // 把a[s]放在temp中待插入

		for (j = 2 * s + 1; j < m; j = 2 * j + 1) {
			if (a[j] < a[j + 1]) {
				j++; // 找出s的两个孩子中的最大值，作为可能的交换通道
			}
			if (temp > a[j]) { // 如果s和两个孩子中s最大，则构建大顶堆结束
				break;
			}
			a[s] = a[j]; // 否则，把较大的a[j]移到s的位置上来，注意原来的a[s]还在temp中没变
			s = j; // s也移到该孩子处，接着继续和它的孩子比，循环
		}
		a[s] = temp; // 直到叶节点或该节点比两个孩子都大，让a[s]等于原来那个a[s]
	}

	public void swap(int[] SqList, int a, int b) {

		int temp;

		temp = SqList[a];
		SqList[a] = SqList[b];
		SqList[b] = temp;
	}

}
