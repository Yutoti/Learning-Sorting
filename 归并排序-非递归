package sorting;

public class MergeNonRecursive {

	public void mNRSorting(int[] SqList) {

		if (SqList == null) {
			System.out.println("The input is empty");
		} else {

			int k = 1;

			while (k < SqList.length - 1) {
				sorting(SqList, k);
				k *= 2;
			}
		}
	}

	public void sorting(int[] SqList, int s) {

		int i = 0;
		int n = SqList.length - 1;

		while (i <= n - 2 * s + 1) {
			merge(SqList, i, i + s - 1, i + 2 * s - 1);
			i = i + 2 * s;
		}

		if (i < n - s + 1) {
			merge(SqList, i, i + s - 1, n);
		}
	}

	public void merge(int[] SqList, int s, int m, int t) {

		int i = s, j = m + 1, k = s;
		int[] TeList = new int[SqList.length];

		while (i <= m && j <= t) {
			if (SqList[i] < SqList[j]) {
				TeList[k++] = SqList[i++];
			} else {
				TeList[k++] = SqList[j++];
			}
		}

		while (i <= m) {
			TeList[k++] = SqList[i++];
		}

		while (j <= t) {
			TeList[k++] = SqList[j++];
		}

		for (k = s; k <= t; k++) {
			SqList[k] = TeList[k];
		}
	}
}
